{
  "openapi": "3.0.0",
  "info": {
    "title": "API Documentation",
    "version": "1.0.0",
    "description": "This is the API documentation for Natours."
  },
  "servers": [
    {
      "url": "http://localhost:3000/api/v1",
      "description": "Local server"
    }
  ],
  "paths": {
    "/tours": {
      "get": {
        "summary": "Get all tours",
        "responses": {
          "200": {
            "description": "A list of tours",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tour"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new tour",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tour"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tour created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tour"
                }
              }
            }
          }
        }
      }
    },
    "/reviews": {
      "get": {
        "summary": "Get all reviews",
        "responses": {
          "200": {
            "description": "A list of reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Review"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new review",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Review"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Review"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "responses": {
          "200": {
            "description": "A list of users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "patch": {
        "summary": "Update a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the user to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/signup": {
      "post": {
        "summary": "Sign up a new user",
        "description": "Creates a new user and returns a JWT for authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User signed up successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "Log in a user",
        "description": "Logs in a user and returns a JWT for authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid email or password"
          }
        }
      }
    },
    "/users/forgotPassword": {
      "post": {
        "summary": "Request password reset",
        "description": "Sends a reset token to the user's email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset token sent to user's email"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users/resetPassword/{token}": {
      "patch": {
        "summary": "Reset password using token",
        "description": "Resets the user's password using a reset token.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "Password reset token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired reset token"
          }
        }
      }
    },
    "/users/updateMyPassword": {
      "patch": {
        "summary": "Update the user's password",
        "description": "Updates the password of the currently logged-in user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid current password"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Tour": {
        "type": "object",
        "required": ["name", "price", "duration"],
        "properties": {
          "id": { "type": "string", "example": "5d8b5b5b5b5b5b5b5b5b5b5b" },
          "name": { "type": "string", "example": "The Forest Hiker" },
          "duration": { "type": "number", "example": 7 },
          "price": { "type": "number", "example": 497 },
          "maxGroupSize": { "type": "number", "example": 25 },
          "difficulty": { "type": "string", "example": "easy" },
          "ratingsAverage": { "type": "number", "example": 4.7 },
          "ratingsQuantity": { "type": "number", "example": 34 },
          "summary": { "type": "string", "example": "Exciting tour for nature lovers" },
          "description": { "type": "string", "example": "Detailed description of the tour." },
          "imageCover": { "type": "string", "example": "tour-1-cover.jpg" },
          "images": {
            "type": "array",
            "items": { "type": "string" },
            "example": ["image1.jpg", "image2.jpg"]
          },
          "startDates": {
            "type": "array",
            "items": { "type": "string", "format": "date-time" },
            "example": ["2024-01-01T00:00:00.000Z", "2024-02-01T00:00:00.000Z"]
          }
        }
      },
      "Review": {
        "type": "object",
        "required": ["review", "rating", "tour", "user"],
        "properties": {
          "id": { "type": "string", "example": "5d8b5b5b5b5b5b5b5b5b5b5b" },
          "review": { "type": "string", "example": "Amazing tour!" },
          "rating": { "type": "number", "example": 4.5 },
          "tour": { "type": "string", "example": "5d8b5b5b5b5b5b5b5b5b5b5b" },
          "user": { "type": "string", "example": "5d8b5b5b5b5b5b5b5b5b5b5b" }
        }
      },

      "SignupRequest": {
        "type": "object",
        "required": ["name", "email", "password", "passwordConfirm"],
        "properties": {
          "name": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "example": "john.doe@example.com" },
          "password": { "type": "string", "example": "password123" },
          "passwordConfirm": { "type": "string", "example": "password123" }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": { "type": "string", "example": "john.doe@example.com" },
          "password": { "type": "string", "example": "password123" }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": { "type": "string", "example": "john.doe@example.com" }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "required": ["password", "passwordConfirm"],
        "properties": {
          "password": { "type": "string", "example": "newPassword123" },
          "passwordConfirm": { "type": "string", "example": "newPassword123" }
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "required": ["passwordCurrent", "password", "passwordConfirm"],
        "properties": {
          "passwordCurrent": { "type": "string", "example": "oldPassword123" },
          "password": { "type": "string", "example": "newPassword123" },
          "passwordConfirm": { "type": "string", "example": "newPassword123" }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "status": { "type": "string", "example": "success" },
          "token": { "type": "string", "example": "jwt-token-here" },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "5d8b5b5b5b5b5b5b5b5b5b5b" },
          "name": { "type": "string", "example": "John Doe" },
          "email": { "type": "string", "example": "john.doe@example.com" },
          "role": { "type": "string", "example": "user" }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
